import streamlit as st
st.set_page_config(page_title="softMASSA", layout="centered")
import os
from database.connection import conectar
from modules.login import main as login_main, marcar_token_expirado, gerenciar_usuarios
from modules.inserir_telas import inserir_telas
from modules.processa_turno import inserir_horarios_separados_front, buscar_historico_por_data
from modules.predicao import criar_predicao_semana
from modules.ver_alterar import ver_e_alterar_telas_por_data
from modules.pedidos import inserir_pedidos_automatizado, inserir_pedidos_manual
from components.ver_conta_funcionario import ver_conta_funcionario
from streamlit_cookies_manager import EncryptedCookieManager

# --- Inicializa√ß√£o de Cookies ---
cookie_password = os.getenv("COOKIE_PASSWORD")
if not cookie_password:
    st.error("‚ùå Vari√°vel de ambiente 'COOKIE_PASSWORD' n√£o definida.")
    st.stop()

cookies = EncryptedCookieManager(prefix="meuapp/", password=cookie_password)
if not cookies.ready():
    st.stop()

# --- Vari√°veis e estados iniciais ---
st.session_state.setdefault("logado", False)
st.session_state.setdefault("usuario", None)
st.session_state.setdefault("pagina", "Menu Principal")
st.session_state.setdefault("usuario_tipo", "comum")  # padr√£o

# --- P√°gina protegida por login ---
conn = conectar()
if not conn:
    st.error("‚ùå Erro ao conectar ao banco de dados.")
    st.stop()

if not st.session_state["logado"]:
    login_main(cookies)
    conn.close()
    st.stop()

conn.close()

# --- T√≠tulo e sauda√ß√£o ---
st.title("üçû Sistema da softMASSA")
st.success(f"Bem-vindo, {st.session_state['usuario']}!")

# --- Defini√ß√£o do menu com base no tipo de usu√°rio ---
if st.session_state['usuario_tipo'] == "admin":
    opcoes = [
        "Home",
        "Inserir telas",
        "Inserir hor√°rios",
        "Alterar telas",
        "Hist√≥rico por data",
        "Predi√ß√£o semanal com IA",
        "Previs√£o manual de pedidos",
        "Previs√£o autom√°tica de pedidos",
        "Ver conta do funcion√°rio",
        "Gerenciar usu√°rios",
        "Sair"
    ]
else:
    opcoes = [
        "Home",
        "Inserir hor√°rios",
        "Hist√≥rico por data",
        "Ver conta do funcion√°rio",
        "Sair"
    ]

# --- Fun√ß√£o utilit√°ria para execu√ß√£o segura ---
def executar_pagina(funcao):
    conn = conectar()
    if not conn:
        st.error("‚ùå N√£o foi poss√≠vel conectar ao banco de dados.")
        return
    try:
        funcao(conn)
    finally:
        conn.close()

# --- Fun√ß√£o de logout ---
def logout():
    if 'token' in st.session_state:
        conn = conectar()
        if conn:
            try:
                marcar_token_expirado(st.session_state['token'], conn)
            finally:
                conn.close()
    cookies["session_token"] = ""
    cookies.save()
    st.session_state.clear()
    st.rerun()

# --- Interface lateral e controle de p√°ginas ---
pagina = st.sidebar.selectbox("Menu", opcoes)

if pagina == "Sair":
    logout()

elif pagina == "Home":
    st.write("P√°gina inicial do sistema.")

elif pagina == "Inserir telas":
    executar_pagina(inserir_telas)

elif pagina == "Inserir hor√°rios":
    executar_pagina(inserir_horarios_separados_front)

elif pagina == "Alterar telas":
    executar_pagina(ver_e_alterar_telas_por_data)

elif pagina == "Hist√≥rico por data":
    executar_pagina(buscar_historico_por_data)

elif pagina == "Predi√ß√£o semanal com IA":
    executar_pagina(criar_predicao_semana)

elif pagina == "Previs√£o manual de pedidos":
    executar_pagina(inserir_pedidos_manual)

elif pagina == "Previs√£o autom√°tica de pedidos":
    executar_pagina(inserir_pedidos_automatizado)

elif pagina == "Ver conta do funcion√°rio":
    executar_pagina(ver_conta_funcionario)

elif pagina == "Gerenciar usu√°rios":
    executar_pagina(gerenciar_usuarios)